function mergeSort(arr, startIdx = 0) {
    if (arr.length <= 1) {
      return arr; // El arreglo ya estÃ¡ ordenado
    }
  
    // Dividir el arreglo en dos mitades
    const middle = Math.floor(arr.length / 2);
    const leftHalf = arr.slice(0, middle);
    const rightHalf = arr.slice(middle);
  
    // Llamadas recursivas para ordenar las dos mitades
    const leftSorted = mergeSort(leftHalf, startIdx);
    const rightSorted = mergeSort(rightHalf, startIdx + middle);
  
    // Fusionar las dos mitades ordenadas
    const mergedArr = merge(leftSorted, rightSorted);
  
    // Actualizar el arreglo original con el arreglo fusionado
    for (let i = 0; i < mergedArr.length; i++) {
      arr[startIdx + i] = mergedArr[i];
    }
  
    return arr;
  }
  
  function merge(left, right) {
    const merged = [];
    let leftIdx = 0;
    let rightIdx = 0;
  
    // Comparar elementos y agregarlos al arreglo fusionado
    while (leftIdx < left.length && rightIdx < right.length) {
      if (left[leftIdx] < right[rightIdx]) {
        merged.push(left[leftIdx]);
        leftIdx++;
      } else {
        merged.push(right[rightIdx]);
        rightIdx++;
      }
    }
  
    // Agregar los elementos restantes de ambas mitades
    return merged.concat(left.slice(leftIdx), right.slice(rightIdx));
  }
  
  // Ejemplo de uso
  const arr = [12, 11, 13, 5, 6, 7];
  mergeSort(arr);
  console.log("Arreglo ordenado:", arr);
  
