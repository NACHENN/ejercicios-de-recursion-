// Función para codificar una cadena utilizando RLE
function encodeRLE(input) {
    let encoded = '';
    let count = 1;
  
    for (let i = 0; i < input.length; i++) {
      if (input[i] === input[i + 1]) {
        count++;
      } else {
        encoded += count + input[i];
        count = 1;
      }
    }
  
    return encoded;
  }
  
  // Función para decodificar una cadena codificada en RLE
  function decodeRLE(encoded) {
    let decoded = '';
    let count = '';
  
    for (let i = 0; i < encoded.length; i++) {
      if (!isNaN(encoded[i])) {
        count += encoded[i];
      } else {
        decoded += encoded[i].repeat(parseInt(count, 10));
        count = '';
      }
    }
  
    return decoded;
  }
  
  // Ejemplo de uso
  const originalString = "AAABBBCCCCDDEEEE";
  const encodedString = encodeRLE(originalString);
  console.log("Cadena codificada:", encodedString);
  
  const decodedString = decodeRLE(encodedString);
  console.log("Cadena decodificada:", decodedString);
  
