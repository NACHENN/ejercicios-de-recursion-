function mergeSort(arr) {
  if (arr.length <= 1) {
    return arr; // Caso base: arreglo de 0 o 1 elemento ya estÃ¡ ordenado
  }

  // Dividir el arreglo en dos mitades
  const middle = Math.floor(arr.length / 2);
  const leftHalf = arr.slice(0, middle);
  const rightHalf = arr.slice(middle);

  // Llamadas recursivas para ordenar las dos mitades y luego fusionarlas
  return merge(mergeSort(leftHalf), mergeSort(rightHalf));
}

function merge(left, right) {
  const merged = [];
  let leftIdx = 0;
  let rightIdx = 0;

  // Comparar elementos y agregarlos al arreglo fusionado
  while (leftIdx < left.length && rightIdx < right.length) {
    if (left[leftIdx] < right[rightIdx]) {
      merged.push(left[leftIdx]);
      leftIdx++;
    } else {
      merged.push(right[rightIdx]);
      rightIdx++;
    }
  }

  // Agregar los elementos restantes de ambas mitades (si los hay)
  return merged.concat(left.slice(leftIdx), right.slice(rightIdx));
}

// Ejemplo de uso
const arr = [12, 11, 13, 5, 6, 7];
const sortedArr = mergeSort(arr);
console.log("Arreglo ordenado:", sortedArr);
